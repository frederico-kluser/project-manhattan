// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`function ElementBuilder function injectedCssUpdater insert style tag on html head 1`] = `
<style
  type="text/css"
>
  
body {
  background-color: #212121;
}

body {
  margin: 0px;
  padding: 0px;
}

.noselect {
  -khtml-user-select: none; /* Konqueror HTML */
  -moz-user-select: none; /* Old versions of Firefox */
  -ms-user-select: none; /* Internet Explorer/Edge */
  -webkit-touch-callout: none; /* iOS Safari */
  -webkit-user-select: none; /* Safari */
  user-select: none; /* Non-prefixed version, currently supported by Chrome, Edge, Opera and Firefox */
}

.kluser_helper {
  background-color: #212121;
  border-radius: 10px;
  border: 1px solid #FFFFFF;
  height: 30px;
  left: 25px;
  max-width: 30px;
  min-width: 30px;
  opacity: 0.1;
  overflow: hidden;
  position: fixed;
  text-align: center;
  top: 25px;
  transition-timing-function: linear;
  transition: all 0.25s;
  transition: opacity 0.25s, max-width 0.5s;
  width: auto;
}

.kluser_helper:hover {
  opacity: 1;
}

.kluser_helper .material-icons {
  background-color: #212121;
  color: #FFFFFF;
  font-size: 20px;
  left: 0px;
  line-height: 30px;
  position: absolute;
  width: 30px;
  z-index: 1;
}

.kluser_text {
  color: #FFFFFF;
  float: left;
  font-family: 'Roboto Mono', monospace;
  font-helperBubbleDefaultPixelSize: 14px;
  height: 30px;
  line-height: 30px;
  margin-left: 38px;
  padding-right: 16px;
  position: relative;
  text-align: right;
}

.kluser_text:empty {
  display: none;
}

.kluser_input {
  background-color: transparent;
  border: none;
  color: #EEEEEE;
  display: none;
  float: left;
  font-family: 'Roboto Mono', monospace;
  height: 30px;
  line-height: 30px;
  outline: none;
  padding-right: 16px;
  padding: 0px;
}

.kluser_input::placeholder {
  color: #BDBDBD;
}

#mockId1 {
	background-color: #FFFFFF;
	border: 1px solid black;
	height: 100px;
	left: 100px;
	position: relative;
	top: 100px;
	width: 100px;
}

#mockId2 {
	background-color: #FFFFFF;
	border: 1px solid black;
	height: 100px;
	left: 100px;
	position: relative;
	top: 100px;
	width: 100px;
}

#mockId3 {
	background-color: #FFFFFF;
	border: 1px solid black;
	height: 100px;
	left: 100px;
	position: relative;
	top: 100px;
	width: 100px;
}

</style>
`;

exports[`function ElementBuilder take a snapshot of Elements 1`] = `
Object {
  "mockId1": Object {
    "dragEvents": [Function],
    "elementGetter": [Function],
    "modeSetter": [Function],
    "styleGetter": [Function],
    "styleSetter": [Function],
  },
  "mockId2": Object {
    "dragEvents": [Function],
    "elementGetter": [Function],
    "modeSetter": [Function],
    "styleGetter": [Function],
    "styleSetter": [Function],
  },
  "mockId3": Object {
    "dragEvents": [Function],
    "elementGetter": [Function],
    "modeSetter": [Function],
    "styleGetter": [Function],
    "styleSetter": [Function],
  },
}
`;

exports[`function ElementBuilder take a snapshot of constructor ElementConfig 1`] = `[Function]`;

exports[`function ElementBuilder test created elements 1`] = `
<div
  id="mockId3"
/>
`;
